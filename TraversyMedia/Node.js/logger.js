//* Creating a logger

const EventEmitter = require("events");
const uuid = require("uuid"); // Install if not installed check package.json

// ! Universally unique identifier
console.log(uuid.v4()); // bcc6ca57-fc17-427e-9cc7-3f2bedc26106
console.log(uuid.v1());
console.log("------------------------------------");

/* UUID v1 : 16447cb0-7e1a-11ed-b1bd-ddfe78e0f51b
   UUID v4 : 9086d75d-94f8-4755-acf6-b91cea441058

   UUID v1 : 42359480-7e29-11ed-b1bd-ddfe78e0f51b
   UUID v4 : b6ba9813-c106-4368-a8f6-f86386283d2e

   UUID v1 : 49a25e10-7e29-11ed-b1bd-ddfe78e0f51b
   UUID v4 : 1cad2cb9-d585-4676-a38f-e9dce3c69d6a

   v1 doesn't change everything as seen from above examples

   UUID v1 is generated by using a combination the host computers MAC address and the current date and time. In addition to this, it also introduces another random component just to be sure of its uniqueness.
   This means you are guaranteed to get a completely unique ID, unless you generate it from the same computer, and at the exact same time. In that case, the chance of collision changes from impossible to very very small because of the random bits.

   The generation of a v4 UUID is much simpler to comprehend. The bits that comprise a UUID v4 are generated randomly and with no inherent logic. Because of this, there is no way to identify information about the source by looking at the UUID.
   However, there is now a chance that a UUID could be duplicated. The question is, do you need to worry about it?
   The short answer is no. With the sheer number of possible combinations (2^128), it would be almost impossible to generate a duplicate unless you are generating trillions of IDs every second, for many years.
   If your application is mission critical (for example, bank transactions or medical systems), you should still add a uniqueness constraint to avoid UUIDv4 collision */

class Logger extends EventEmitter {
  log(msg) {
    // Call event
    this.emit("message", { id: uuid.v4(), msg: msg });
  }
}

module.exports = Logger;
